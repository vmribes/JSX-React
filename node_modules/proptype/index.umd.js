(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('babel-runtime/helpers/typeof'), require('babel-runtime/helpers/classCallCheck'), require('babel-runtime/helpers/createClass'), require('babel-runtime/core-js/object/get-prototype-of'), require('babel-runtime/helpers/possibleConstructorReturn'), require('babel-runtime/helpers/inherits'), require('babel-runtime/helpers/get'), require('babel-runtime/core-js/symbol'), require('babel-runtime/core-js/get-iterator'), require('babel-runtime/core-js/object/keys'), require('babel-runtime/core-js/json/stringify')) :
  typeof define === 'function' && define.amd ? define(['exports', 'babel-runtime/helpers/typeof', 'babel-runtime/helpers/classCallCheck', 'babel-runtime/helpers/createClass', 'babel-runtime/core-js/object/get-prototype-of', 'babel-runtime/helpers/possibleConstructorReturn', 'babel-runtime/helpers/inherits', 'babel-runtime/helpers/get', 'babel-runtime/core-js/symbol', 'babel-runtime/core-js/get-iterator', 'babel-runtime/core-js/object/keys', 'babel-runtime/core-js/json/stringify'], factory) :
  (factory((global.proptype = global.proptype || {}),global._typeof,global._classCallCheck,global._createClass,global._Object$getPrototypeOf,global._possibleConstructorReturn,global._inherits,global._get,global._Symbol,global._getIterator,global._Object$keys,global._JSON$stringify));
}(this, function (exports,_typeof,_classCallCheck,_createClass,_Object$getPrototypeOf,_possibleConstructorReturn,_inherits,_get,_Symbol,_getIterator,_Object$keys,_JSON$stringify) { 'use strict';

  _typeof = 'default' in _typeof ? _typeof['default'] : _typeof;
  _classCallCheck = 'default' in _classCallCheck ? _classCallCheck['default'] : _classCallCheck;
  _createClass = 'default' in _createClass ? _createClass['default'] : _createClass;
  _Object$getPrototypeOf = 'default' in _Object$getPrototypeOf ? _Object$getPrototypeOf['default'] : _Object$getPrototypeOf;
  _possibleConstructorReturn = 'default' in _possibleConstructorReturn ? _possibleConstructorReturn['default'] : _possibleConstructorReturn;
  _inherits = 'default' in _inherits ? _inherits['default'] : _inherits;
  _get = 'default' in _get ? _get['default'] : _get;
  _Symbol = 'default' in _Symbol ? _Symbol['default'] : _Symbol;
  _getIterator = 'default' in _getIterator ? _getIterator['default'] : _getIterator;
  _Object$keys = 'default' in _Object$keys ? _Object$keys['default'] : _Object$keys;
  _JSON$stringify = 'default' in _JSON$stringify ? _JSON$stringify['default'] : _JSON$stringify;

  /**
   * Created by chetanv on 15/06/16.
   */

  // import _debug from 'debug';
  // const debug = _debug('TypeFactory');

  function createPrimitivePropType(Type) {
    var type = new Type();
    type.isRequired = new Type(true);
    return type;
  }

  function createComplexPropType(Type) {
    return function () {
      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      var type = new (Function.prototype.bind.apply(Type, [null].concat(args)))();
      Object.defineProperty(type, 'isRequired', {
        /* eslint-disable func-names, object-shorthand */
        get: function get() {
          this.valueIsRequired = true;
          return this;
        }
      });
      /* eslint-enable func-names, object-shorthand */
      return type;
    };
  }

  var TypeFactory = function () {
    function TypeFactory() {
      _classCallCheck(this, TypeFactory);

      this.types = {};
      this.propTypes = {};
    }

    _createClass(TypeFactory, [{
      key: 'register',
      value: function register(Type) {
        var asInstance = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];

        var typeName = Type.TYPE_NAME;

        if (this.types[typeName]) {
          throw new Error('Type ' + typeName + ' already registered.');
        }

        this.types[typeName] = Type;

        this.propTypes[typeName] = asInstance ? createPrimitivePropType(Type) : createComplexPropType(Type);
      }
    }, {
      key: 'fromJson',
      value: function fromJson(typeJson) {
        if ((typeof typeJson === 'undefined' ? 'undefined' : _typeof(typeJson)) !== 'object') {
          throw new Error('Invalid type json passed');
        }

        var Type = this.types[typeJson.type];

        if (!Type) {
          throw new Error('Unknown type \'' + typeJson.type + '\' requested');
        }

        return Type.fromJson(typeJson);
      }
    }]);

    return TypeFactory;
  }();

  /**
   * Created by chetanv on 17/06/16.
   */

  function checkType(type, Type) {
    if (type && type !== Type.TYPE_NAME) {
      throw new Error("Invalid type detected: " + type + " while creating " + Type.name + " instance");
    }
  }

  var AnyType = function () {
    _createClass(AnyType, null, [{
      key: 'fromJson',
      value: function fromJson(obj) {
        checkType(obj.type, AnyType);
        return new AnyType(obj.required);
      }
    }]);

    function AnyType() {
      var required = arguments.length <= 0 || arguments[0] === undefined ? false : arguments[0];

      _classCallCheck(this, AnyType);

      this.valueIsRequired = false;

      this.valueIsRequired = required;
    }

    _createClass(AnyType, [{
      key: 'validate',
      value: function validate(value) {
        if (value == null && this.valueIsRequired) {
          return new Error('Required value was not specified');
        }

        return null;
      }
    }, {
      key: 'required',
      value: function required() {
        return this.valueIsRequired;
      }
    }, {
      key: 'toJson',
      value: function toJson() {
        return {
          type: AnyType.TYPE_NAME,
          required: this.valueIsRequired
        };
      }
    }]);

    return AnyType;
  }();

  AnyType.TYPE_NAME = 'any';

  /**
   * Created by chetanv on 10/06/16.
   */

  /**
   *
   * This source code was taken from
   * https://github.com/facebook/react/blob/master/src/isomorphic/classic/types/ReactPropTypes.js
   *
   * Following is the license as per the file mentioned above
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   */

  function isSymbol(propValue) {
    var propType = typeof propValue === 'undefined' ? 'undefined' : _typeof(propValue);

    // Native Symbol.
    if (propType === 'symbol') {
      return true;
    }

    // following code is just to make things work when probably not in right env
    // mostly, the above code should handle things fine.

    /* istanbul ignore next */
    if (propValue) {
      // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'
      if (propValue['@@toStringTag'] === 'Symbol') {
        return true;
      }

      // Fallback for non-spec compliant Symbols which are polyfilled.
      if (typeof _Symbol === 'function' && propValue instanceof _Symbol) {
        return true;
      }
    }

    return false;
  }

  // Equivalent of `typeof` but with special handling for array and regexp.
  function getPropType(propValue) {
    var propType = typeof propValue === 'undefined' ? 'undefined' : _typeof(propValue);

    if (Array.isArray(propValue)) {
      return 'array';
    }

    if (propValue instanceof RegExp) {
      // Old webkits (at least until Android 4.0) return 'function' rather than
      // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
      // passes PropTypes.object.
      return 'object';
    }

    if (isSymbol(propValue)) {
      return 'symbol';
    }

    return propType;
  }

  function getPreciseType(propValue) {
    var propType = getPropType(propValue);

    if (propType === 'object') {
      if (propValue instanceof Date) {
        return 'date';
      } else if (propValue instanceof RegExp) {
        return 'regexp';
      }
    }

    return propType;
  }

  var PrimitiveType = function (_AnyType) {
    _inherits(PrimitiveType, _AnyType);

    _createClass(PrimitiveType, null, [{
      key: 'primitiveFromJson',
      value: function primitiveFromJson(obj, Type) {
        checkType(obj.type, Type);
        return new Type(obj.required);
      }
    }]);

    function PrimitiveType(type) {
      var required = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];

      _classCallCheck(this, PrimitiveType);

      var _this = _possibleConstructorReturn(this, _Object$getPrototypeOf(PrimitiveType).call(this, required));

      _this.type = null;

      _this.type = type;
      return _this;
    }

    _createClass(PrimitiveType, [{
      key: 'validate',
      value: function validate(value) {
        var err = _get(_Object$getPrototypeOf(PrimitiveType.prototype), 'validate', this).call(this, value);
        if (err) {
          return err;
        }

        if (value !== null && value !== undefined) {
          var propType = getPropType(value);
          if (propType !== this.type) {
            var preciseType = getPreciseType(value);
            err = new Error('Invalid value of ' + preciseType + (' type supplied, expected ' + this.type + '.'));
          }
        }

        return err;
      }
    }, {
      key: 'toJson',
      value: function toJson() {
        return {
          type: this.type,
          required: this.valueIsRequired
        };
      }
    }]);

    return PrimitiveType;
  }(AnyType);

  var ArrayType = function (_PrimitiveType) {
    _inherits(ArrayType, _PrimitiveType);

    _createClass(ArrayType, null, [{
      key: 'fromJson',
      value: function fromJson(obj) {
        return PrimitiveType.primitiveFromJson(obj, ArrayType);
      }
    }]);

    function ArrayType() {
      var required = arguments.length <= 0 || arguments[0] === undefined ? false : arguments[0];

      _classCallCheck(this, ArrayType);

      return _possibleConstructorReturn(this, _Object$getPrototypeOf(ArrayType).call(this, ArrayType.TYPE_NAME, required));
    }

    return ArrayType;
  }(PrimitiveType);

  ArrayType.TYPE_NAME = 'array';

  var BoolType = function (_PrimitiveType) {
    _inherits(BoolType, _PrimitiveType);

    _createClass(BoolType, null, [{
      key: 'fromJson',
      value: function fromJson(obj) {
        return PrimitiveType.primitiveFromJson(obj, BoolType);
      }
    }]);

    function BoolType() {
      var required = arguments.length <= 0 || arguments[0] === undefined ? false : arguments[0];

      _classCallCheck(this, BoolType);

      return _possibleConstructorReturn(this, _Object$getPrototypeOf(BoolType).call(this, 'boolean', required));
    }

    _createClass(BoolType, [{
      key: 'toJson',
      value: function toJson() {
        return {
          type: BoolType.TYPE_NAME,
          required: this.required()
        };
      }
    }]);

    return BoolType;
  }(PrimitiveType);

  BoolType.TYPE_NAME = 'bool';

  var FuncType = function (_PrimitiveType) {
    _inherits(FuncType, _PrimitiveType);

    _createClass(FuncType, null, [{
      key: 'fromJson',
      value: function fromJson(obj) {
        return PrimitiveType.primitiveFromJson(obj, FuncType);
      }
    }]);

    function FuncType() {
      var required = arguments.length <= 0 || arguments[0] === undefined ? false : arguments[0];

      _classCallCheck(this, FuncType);

      return _possibleConstructorReturn(this, _Object$getPrototypeOf(FuncType).call(this, 'function', required));
    }

    _createClass(FuncType, [{
      key: 'toJson',
      value: function toJson() {
        return {
          type: FuncType.TYPE_NAME,
          required: this.required()
        };
      }
    }]);

    return FuncType;
  }(PrimitiveType);

  FuncType.TYPE_NAME = 'func';

  var NumberType = function (_PrimitiveType) {
    _inherits(NumberType, _PrimitiveType);

    _createClass(NumberType, null, [{
      key: 'fromJson',
      value: function fromJson(obj) {
        return PrimitiveType.primitiveFromJson(obj, NumberType);
      }
    }]);

    function NumberType() {
      var required = arguments.length <= 0 || arguments[0] === undefined ? false : arguments[0];

      _classCallCheck(this, NumberType);

      return _possibleConstructorReturn(this, _Object$getPrototypeOf(NumberType).call(this, 'number', required));
    }

    return NumberType;
  }(PrimitiveType);

  NumberType.TYPE_NAME = 'number';

  var ObjectType = function (_PrimitiveType) {
    _inherits(ObjectType, _PrimitiveType);

    _createClass(ObjectType, null, [{
      key: 'fromJson',
      value: function fromJson(obj) {
        return PrimitiveType.primitiveFromJson(obj, ObjectType);
      }
    }]);

    function ObjectType() {
      var required = arguments.length <= 0 || arguments[0] === undefined ? false : arguments[0];

      _classCallCheck(this, ObjectType);

      return _possibleConstructorReturn(this, _Object$getPrototypeOf(ObjectType).call(this, ObjectType.TYPE_NAME, required));
    }

    return ObjectType;
  }(PrimitiveType);

  ObjectType.TYPE_NAME = 'object';

  var StringType = function (_PrimitiveType) {
    _inherits(StringType, _PrimitiveType);

    _createClass(StringType, null, [{
      key: 'fromJson',
      value: function fromJson(obj) {
        return PrimitiveType.primitiveFromJson(obj, StringType);
      }
    }]);

    function StringType() {
      var required = arguments.length <= 0 || arguments[0] === undefined ? false : arguments[0];

      _classCallCheck(this, StringType);

      return _possibleConstructorReturn(this, _Object$getPrototypeOf(StringType).call(this, StringType.TYPE_NAME, required));
    }

    return StringType;
  }(PrimitiveType);

  StringType.TYPE_NAME = 'string';

  var SymbolType = function (_PrimitiveType) {
    _inherits(SymbolType, _PrimitiveType);

    _createClass(SymbolType, null, [{
      key: 'fromJson',
      value: function fromJson(obj) {
        return PrimitiveType.primitiveFromJson(obj, SymbolType);
      }
    }]);

    function SymbolType() {
      var required = arguments.length <= 0 || arguments[0] === undefined ? false : arguments[0];

      _classCallCheck(this, SymbolType);

      return _possibleConstructorReturn(this, _Object$getPrototypeOf(SymbolType).call(this, SymbolType.TYPE_NAME, required));
    }

    return SymbolType;
  }(PrimitiveType);

  SymbolType.TYPE_NAME = 'symbol';

  // import _debug from 'debug';
  // const debug = _debug('ArrayOfType');

  var ArrayOfType = function (_ArrayType) {
    _inherits(ArrayOfType, _ArrayType);

    _createClass(ArrayOfType, null, [{
      key: 'fromJson',
      value: function fromJson(obj) {
        checkType(obj.type, ArrayOfType);
        return new ArrayOfType(factory.fromJson(obj.arrayOf), obj.required);
      }
    }]);

    function ArrayOfType(arrayOf) {
      var required = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];

      _classCallCheck(this, ArrayOfType);

      var _this = _possibleConstructorReturn(this, _Object$getPrototypeOf(ArrayOfType).call(this, required));

      _this.arrayOf = null;


      if (!(arrayOf instanceof AnyType)) {
        throw new Error('Invalid PropType notation inside arrayOf.');
      }
      _this.arrayOf = arrayOf;
      return _this;
    }

    _createClass(ArrayOfType, [{
      key: 'validate',
      value: function validate(value) {
        var err = _get(_Object$getPrototypeOf(ArrayOfType.prototype), 'validate', this).call(this, value);

        if (err) {
          return err;
        }

        var valueToValidate = value || [];
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = _getIterator(valueToValidate), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var valueItem = _step.value;

            err = this.arrayOf.validate(valueItem);
            if (err) {
              return err;
            }
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return) {
              _iterator.return();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }

        return null;
      }
    }, {
      key: 'toJson',
      value: function toJson() {
        return {
          type: ArrayOfType.TYPE_NAME,
          required: this.valueIsRequired,
          arrayOf: this.arrayOf.toJson()
        };
      }
    }]);

    return ArrayOfType;
  }(ArrayType);

  ArrayOfType.TYPE_NAME = 'arrayOf';

  var CustomType = function (_AnyType) {
    _inherits(CustomType, _AnyType);

    _createClass(CustomType, null, [{
      key: 'fromJson',
      value: function fromJson() {
        throw new Error('CustomType can not be created from json object.' + ' It requires a function to validate the value.');
      }
    }]);

    function CustomType(validator) {
      var required = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];

      _classCallCheck(this, CustomType);

      var _this = _possibleConstructorReturn(this, _Object$getPrototypeOf(CustomType).call(this, required));

      _this.validator = null;

      if (typeof validator !== 'function') {
        throw new Error('Invalid validator function supplied to CustomType');
      }

      _this.validator = validator;
      return _this;
    }

    _createClass(CustomType, [{
      key: 'validate',
      value: function validate(value) {
        var err = _get(_Object$getPrototypeOf(CustomType.prototype), 'validate', this).call(this, value);
        if (err) {
          return err;
        }

        if (value !== undefined && value !== null) {
          err = this.validator(value);
        }

        return err;
      }
    }, {
      key: 'toJson',
      value: function toJson() {
        throw new Error('CustomType can not be serialized to a json object.');
      }
    }]);

    return CustomType;
  }(AnyType);

  CustomType.TYPE_NAME = 'custom';

  // import _debug from 'debug';
  // const debug = _debug('InstanceOfType');

  var InstanceOfType = function (_AnyType) {
    _inherits(InstanceOfType, _AnyType);

    _createClass(InstanceOfType, null, [{
      key: 'fromJson',
      value: function fromJson() {
        throw new Error('InstanceOfType can not be created from json object.' + ' It requires a class/constructor function to validate the value.');
      }
    }]);

    function InstanceOfType(InstanceOf) {
      var required = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];

      _classCallCheck(this, InstanceOfType);

      var _this = _possibleConstructorReturn(this, _Object$getPrototypeOf(InstanceOfType).call(this, required));

      _this.InstanceOf = null;


      if (typeof InstanceOf !== 'function') {
        throw new Error('Invalid class passed to InstanceOf type');
      }
      _this.InstanceOf = InstanceOf;
      return _this;
    }

    _createClass(InstanceOfType, [{
      key: 'validate',
      value: function validate(value) {
        var err = _get(_Object$getPrototypeOf(InstanceOfType.prototype), 'validate', this).call(this, value);
        if (err) {
          return err;
        }

        if (value && !(value instanceof this.InstanceOf)) {
          return new Error('Invalid value supplied. ' + ('Expect value to be an instance of ' + this.InstanceOf.name));
        }

        return null;
      }
    }, {
      key: 'toJson',
      value: function toJson() {
        throw new Error('InstanceOfType can not be serialized to a json object.');
      }
    }]);

    return InstanceOfType;
  }(AnyType);

  InstanceOfType.TYPE_NAME = 'instanceOf';

  var ObjectOfType = function (_ObjectType) {
    _inherits(ObjectOfType, _ObjectType);

    _createClass(ObjectOfType, null, [{
      key: 'fromJson',
      value: function fromJson(obj) {
        checkType(obj.type, ObjectOfType);
        return new ObjectOfType(factory.fromJson(obj.objectOf), obj.required);
      }
    }]);

    function ObjectOfType(objectOf) {
      var required = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];

      _classCallCheck(this, ObjectOfType);

      var _this = _possibleConstructorReturn(this, _Object$getPrototypeOf(ObjectOfType).call(this, required));

      _this.objectOf = null;


      if (!(objectOf instanceof AnyType)) {
        throw new Error('Invalid PropType notation inside ObjectOf.');
      }

      _this.objectOf = objectOf;
      return _this;
    }

    _createClass(ObjectOfType, [{
      key: 'validate',
      value: function validate(value) {
        var err = _get(_Object$getPrototypeOf(ObjectOfType.prototype), 'validate', this).call(this, value);
        if (err) {
          return err;
        }

        var valueToValidate = value || {};

        var keys = _Object$keys(valueToValidate);

        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = _getIterator(keys), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var key = _step.value;

            err = this.objectOf.validate(valueToValidate[key]);
            if (err) {
              return err;
            }
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return) {
              _iterator.return();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }

        return null;
      }
    }, {
      key: 'toJson',
      value: function toJson() {
        return {
          type: ObjectOfType.TYPE_NAME,
          required: this.required(),
          objectOf: this.objectOf.toJson()
        };
      }
    }]);

    return ObjectOfType;
  }(ObjectType);

  ObjectOfType.TYPE_NAME = 'objectOf';

  /**
   * Created by chetanv on 13/06/16.
   */

  /**
   * inlined Object.is polyfill
   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
   */
  /* eslint-disable no-self-compare */
  function is(x, y) {
    var ret = false;
    // SameValue algorithm
    if (x === y) {
      // Steps 1-5, 7-10
      // Steps 6.b-6.e: +0 != -0
      ret = x !== 0 || 1 / x === 1 / y;
    } else {
      // Step 6.a: NaN == NaN
      ret = x !== x && y !== y;
    }

    return ret;
  }

  var OneOfType = function (_AnyType) {
    _inherits(OneOfType, _AnyType);

    _createClass(OneOfType, null, [{
      key: 'fromJson',
      value: function fromJson(obj) {
        checkType(obj.type, OneOfType);
        return new OneOfType(obj.oneOf, obj.required);
      }
    }]);

    function OneOfType(oneOf) {
      var required = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];

      _classCallCheck(this, OneOfType);

      var _this = _possibleConstructorReturn(this, _Object$getPrototypeOf(OneOfType).call(this, required));

      _this.oneOf = [];


      if (!Array.isArray(oneOf)) {
        throw new Error('Invalid argument supplied to oneOf, expected an instance of array.');
      }

      _this.oneOf = oneOf;
      return _this;
    }

    _createClass(OneOfType, [{
      key: 'validate',
      value: function validate(value) {
        var err = _get(_Object$getPrototypeOf(OneOfType.prototype), 'validate', this).call(this, value);
        if (err) {
          return err;
        }

        if (value === null || value === undefined) {
          return null;
        }

        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = _getIterator(this.oneOf), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var expectedValue = _step.value;

            if (is(value, expectedValue)) {
              return null;
            }
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return) {
              _iterator.return();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }

        return new Error('Ivalid value ' + value + ' given. ' + ('Expected one of ' + _JSON$stringify(this.oneOf)));
      }
    }, {
      key: 'toJson',
      value: function toJson() {
        return {
          type: OneOfType.TYPE_NAME,
          required: this.required(),
          oneOf: this.oneOf
        };
      }
    }]);

    return OneOfType;
  }(AnyType);

  OneOfType.TYPE_NAME = 'oneOf';

  var OneOfTypeType = function (_AnyType) {
    _inherits(OneOfTypeType, _AnyType);

    _createClass(OneOfTypeType, null, [{
      key: 'fromJson',
      value: function fromJson(obj) {
        checkType(obj.type, OneOfTypeType);
        return new OneOfTypeType(obj.oneOfType.map(function (typeJson) {
          return factory.fromJson(typeJson);
        }), obj.required);
      }
    }]);

    function OneOfTypeType(oneOfType) {
      var required = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];

      _classCallCheck(this, OneOfTypeType);

      var _this = _possibleConstructorReturn(this, _Object$getPrototypeOf(OneOfTypeType).call(this, required));

      _this.oneOfType = null;


      if (!Array.isArray(oneOfType)) {
        throw new Error('Invalid argument supplied to oneOfType, expected an instance of array.');
      }

      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = _getIterator(oneOfType), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var type = _step.value;

          if (!(type instanceof AnyType)) {
            throw new Error('Invalid type supplied to oneOfType array of types');
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      _this.oneOfType = oneOfType;
      return _this;
    }

    _createClass(OneOfTypeType, [{
      key: 'validate',
      value: function validate(value) {
        var err = _get(_Object$getPrototypeOf(OneOfTypeType.prototype), 'validate', this).call(this, value);
        if (err) {
          return err;
        }

        if (value === null || value === undefined) {
          return null;
        }

        var _iteratorNormalCompletion2 = true;
        var _didIteratorError2 = false;
        var _iteratorError2 = undefined;

        try {
          for (var _iterator2 = _getIterator(this.oneOfType), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
            var type = _step2.value;

            if (type.validate(value) === null) {
              return null;
            }
          }
        } catch (err) {
          _didIteratorError2 = true;
          _iteratorError2 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion2 && _iterator2.return) {
              _iterator2.return();
            }
          } finally {
            if (_didIteratorError2) {
              throw _iteratorError2;
            }
          }
        }

        return new Error('Invalid value supplied');
      }
    }, {
      key: 'toJson',
      value: function toJson() {
        return {
          type: OneOfTypeType.TYPE_NAME,
          required: this.required(),
          oneOfType: this.oneOfType.map(function (type) {
            return type.toJson();
          })
        };
      }
    }]);

    return OneOfTypeType;
  }(AnyType);

  OneOfTypeType.TYPE_NAME = 'oneOfType';

  /**
   * Created by chetanv on 17/06/16.
   */

  function mapObject(obj, fn) {
    if ((typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) !== 'object') {
      throw new Error('Expected an object as the first argument');
    }

    if (typeof fn !== 'function') {
      throw new Error('Expected second argument to be a function');
    }

    var keys = _Object$keys(obj);
    var mappedObj = {};
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = _getIterator(keys), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var key = _step.value;

        mappedObj[key] = fn(obj[key], key);
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    return mappedObj;
  }

  var ShapeType = function (_ObjectType) {
    _inherits(ShapeType, _ObjectType);

    _createClass(ShapeType, null, [{
      key: 'fromJson',
      value: function fromJson(obj) {
        checkType(obj.type, ShapeType);
        return new ShapeType(mapObject(obj.shape, function (typeJson) {
          return factory.fromJson(typeJson);
        }), obj.required);
      }
    }]);

    function ShapeType(shape) {
      var required = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];

      _classCallCheck(this, ShapeType);

      var _this = _possibleConstructorReturn(this, _Object$getPrototypeOf(ShapeType).call(this, required));

      _this.shape = null;


      if (getPropType(shape) !== 'object') {
        throw new Error('Invalid shape object supplied to shapeType.');
      }

      var keys = _Object$keys(shape);

      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = _getIterator(keys), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var key = _step.value;

          if (!(shape[key] instanceof AnyType)) {
            throw new Error('Invalid type supplied to shape type');
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      _this.shape = shape;
      return _this;
    }

    _createClass(ShapeType, [{
      key: 'validate',
      value: function validate(value) {
        var err = _get(_Object$getPrototypeOf(ShapeType.prototype), 'validate', this).call(this, value);
        if (err) {
          return err;
        }

        if (value !== null && value !== undefined) {
          var keys = _Object$keys(this.shape);
          var _iteratorNormalCompletion2 = true;
          var _didIteratorError2 = false;
          var _iteratorError2 = undefined;

          try {
            for (var _iterator2 = _getIterator(keys), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
              var key = _step2.value;

              err = this.shape[key].validate(value[key]);
              if (err) {
                return err;
              }
            }
          } catch (err) {
            _didIteratorError2 = true;
            _iteratorError2 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion2 && _iterator2.return) {
                _iterator2.return();
              }
            } finally {
              if (_didIteratorError2) {
                throw _iteratorError2;
              }
            }
          }
        }

        return null;
      }
    }, {
      key: 'toJson',
      value: function toJson() {
        return {
          type: ShapeType.TYPE_NAME,
          required: this.required(),
          shape: mapObject(this.shape, function (type) {
            return type.toJson();
          })
        };
      }
    }]);

    return ShapeType;
  }(ObjectType);

  ShapeType.TYPE_NAME = 'shape';

  // import _debug from 'debug';
  // const debug = _debug('factory');

  var factory = new TypeFactory();
  factory.register(AnyType, true);
  factory.register(ArrayType, true);
  factory.register(BoolType, true);
  factory.register(FuncType, true);
  factory.register(NumberType, true);
  factory.register(ObjectType, true);
  factory.register(StringType, true);
  factory.register(SymbolType, true);

  factory.register(ArrayOfType);
  factory.register(CustomType);
  factory.register(InstanceOfType);
  factory.register(ObjectOfType);
  factory.register(OneOfType);
  factory.register(OneOfTypeType);
  factory.register(ShapeType);

  // import _debug from 'debug';
  // const debug = _debug('index');

  var PropTypes = factory.propTypes;

  exports.PropTypes = PropTypes;
  exports.AnyType = AnyType;
  exports.ArrayType = ArrayType;
  exports.BoolType = BoolType;
  exports.FuncType = FuncType;
  exports.NumberType = NumberType;
  exports.ObjectType = ObjectType;
  exports.StringType = StringType;
  exports.SymbolType = SymbolType;
  exports.ArrayOfType = ArrayOfType;
  exports.InstanceOfType = InstanceOfType;
  exports.ObjectOfType = ObjectOfType;
  exports.OneOfType = OneOfType;
  exports.OneOfTypeType = OneOfTypeType;
  exports.ShapeType = ShapeType;
  exports['default'] = factory;

  Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=index.umd.js.map